// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company{
  companyId String @id @default(uuid())
  name String @unique
  totalNumber Int @default(0)
  userId String 
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  bus Bus[]
}

model Bus {
  busId      String   @id @default(uuid())
  busNumber  String   @unique
  busDriver  String?
  from       String
  destination String
  departureTime String
  journeyTime  Float
  price       Int
  companyId   String
  comapny     Company @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  seats       Seat[]
  tickets     Ticket[]
}
// Seat Schema
enum Position {
  ws
  ms
}
model Seat {
  seatId      String  @id @default(cuid())
  position    Position
  datesBooked DateTime[]
  busId       String
  seatNo      Int     @unique
  bus         Bus     @relation(fields: [busId], references: [busId], onDelete: Cascade)
  ticketId    String?
  ticket      Ticket? @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

enum Role{
  admin
  company
  user
}
model User{
  id String @id
  name String
  email String @unique
  image String
  createdAt DateTime @default(now())
  tickets Ticket[]
  company Company[]
  role Role @default(user)
}

enum ConformationType{
  waitlist
  confirmed
  cancelled
  paymentNotDone
}

model Ticket {
  id             String     @id @default(uuid())
  conformation   ConformationType @default(paymentNotDone)
  bookedDate     DateTime   @default(now())
  cancelledDate  DateTime?
  refundId       String?    @unique
  refund         Refund?    @relation(fields: [refundId], references: [id])
  PaymentId      String?    @unique
  payment        Payment?   @relation(fields: [PaymentId], references: [id])
  userId         String
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  busId          String
  bus            Bus        @relation(fields: [busId], references: [busId], onDelete: Cascade)
  seats          Seat[]    
}

enum Methods{
  upi
  debit
  credit
}
model Refund{
  id String @id @default(uuid())
  Amount Int
  Method Methods
  ticket Ticket?
}

model Payment{
  id String @id @default(uuid())
  Amount Int
  Method Methods
  ticket Ticket?
}